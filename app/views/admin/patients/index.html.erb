<%#
# Index

This view is the template for the index page.
It is responsible for rendering the search bar, header and pagination.
It renders the `_table` partial to display details about the resources.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Collection][1].
  Contains helper methods to help display a table,
  and knows which attributes should be displayed in the resource's table.
- `resources`:
  An instance of `ActiveRecord::Relation` containing the resources
  that match the user's search criteria.
  By default, these resources are passed to the table partial to be displayed.
- `search_term`:
  A string containing the term the user has searched for, if any.
- `show_search_bar`:
  A boolean that determines if the search bar should be shown.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Collection
%>
<head>
<%= stylesheet_link_tag    "application", :media => "all" %>
<%= javascript_include_tag 'application' %>

<!-- Odometr includes -->
<link rel="stylesheet" href="http://github.hubspot.com/odometer/themes/odometer-theme-default.css" />
<script src="http://github.hubspot.com/odometer/odometer.js"></script>


<script src="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js"></script>

<script src="//cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.5/ScrollMagic.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.5/plugins/debug.addIndicators.min.js"></script>

<link rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/animate.css@3.5.2/animate.min.css">

</head>

<% content_for(:title) do %>
  <%= display_resource_name(page.resource_name) %>
<% end %>

<header class="main-content__header" role="banner">
  <h1 class="main-content__page-title" id="page-title">
    <%= content_for(:title) %>
  </h1>

  <% if show_search_bar %>
    <%= render(
      "search",
      search_term: search_term,
      resource_name: display_resource_name(page.resource_name)
    ) %>
  <% end %>

  <div>
    <%= link_to(
      t(
        "administrate.actions.new_resource",
        name: page.resource_name.titleize.downcase
      ),
      [:new, namespace, page.resource_path],
      class: "button",
    ) if valid_action?(:new) && show_action?(:new, new_resource) %>
  </div>
</header>

<section class="main-content__body main-content__body--flush">
  <%= render(
    "collection",
    collection_presenter: page,
    resources: resources,
    table_title: "page-title"
  ) %>

  <%= paginate resources %>

<br>
<div class = "row">
  <div style="width:500px" class="ct-chart col-md-5 offset-md-1 ct-perfect-fourth" id="chart"></div>

  <div class="col-md-6"> <div class="card border-dark mb-3" style="max-width: 30rem;">
  <div class="card-header">Patients Overview</div>
  
  <div>
  <div class="card-body text-primary" style="width:45%; display: inline-block">
    <h5 class="card-title"><div id="odometer" class="odometer">123</div></h5>
    <p class="card-text">with Diabetes</p>
  </div>
  <div class="card-body text-success" style="width:45%; display: inline-block">
    <h5 class="card-title"><div id="odometer3" class="odometer">103</div></h5>
    <p class="card-text">with Obesity</p>
  </div>
  </div>

  <div>
  <div class="card-body text-danger" style="width:45%; display: inline-block">
    <h5 class="card-title"><div id="odometer2" class="odometer">123</div></h5>
    <p class="card-text">with High Blood Pressure</p>
  </div>
  <div class="card-body text-info" style="width:45%; display: inline-block">
    <h5 class="card-title"><div id="odometer4" class="odometer">103</div></h5>
    <p class="card-text">with more than 1 disease</p>
  </div>
  </div>


</div>
</div>
</div>

</section>

<style>
.odometer {
    font-size: 100px;
}
</style>

  <script>
    var chart = new Chartist.Pie('.ct-chart', {
  series: [10, 20, 50, 20],
  labels: ["Diabetes", "Hypertensive", "Overweight", "More than 1"]
}, {
  donut: true,
  showLabel: true,
});

chart.on('draw', function(data) {
  if(data.type === 'slice') {
    // Get the total path length in order to use for dash array animation
    var pathLength = data.element._node.getTotalLength();

    // Set a dasharray that matches the path length as prerequisite to animate dashoffset
    data.element.attr({
      'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
    });

    // Create animation definition while also assigning an ID to the animation for later sync usage
    var animationDefinition = {
      'stroke-dashoffset': {
        id: 'anim' + data.index,
        dur: 1000,
        from: -pathLength + 'px',
        to:  '0px',
        easing: Chartist.Svg.Easing.easeOutQuint,
        // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
        fill: 'freeze'
      }
    };

    // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
    if(data.index !== 0) {
      animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
    }

    // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
    data.element.attr({
      'stroke-dashoffset': -pathLength + 'px'
    });

    // We can't use guided mode as the animations need to rely on setting begin manually
    // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
    data.element.animate(animationDefinition, false);
  }
});

// For the sake of the example we update the chart every time it's created with a delay of 8 seconds
chart.on('created', function() {
  if(window.__anim21278907124) {
    clearTimeout(window.__anim21278907124);
    window.__anim21278907124 = null;
  }
  window.__anim21278907124 = setTimeout(chart.update.bind(chart), 10000);
});

setTimeout(function(){
    odometer.innerHTML = 456;
}, 1000);
setTimeout(function(){
    odometer2.innerHTML = 152;
}, 1000);
setTimeout(function(){
    odometer3.innerHTML = 788;
}, 1000);

setTimeout(function(){
    odometer4.innerHTML = 211;
}, 1000);
  </script>
